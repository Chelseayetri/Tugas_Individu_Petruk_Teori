#include <iostream>
#include <vector>
#include <chrono>
#include <iomanip> // untuk mengatur format output

using namespace std;
using namespace std::chrono;


void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

void insertionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

void selectionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        int min = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[min]) {
                min = j;
            }
        }
        swap(arr[i], arr[min]);
    }
}

void merge(vector<int>& arr, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int i = 0; i < n2; i++)
        R[i] = arr[m + 1 + i];

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(vector<int>& arr, int l, int r) {
    if (l >= r) return;

    int m = l + (r - l) / 2;
    mergeSort(arr, l, m);
    mergeSort(arr, m + 1, r);
    merge(arr, l, m, r);
}

int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Fungsi untuk mengukur waktu eksekusi dalam detik
void measureTime(void (*sortFunc)(vector<int>&, int, int), vector<int> arr, int l, int r, const string& algorithm_name) {
    auto start = high_resolution_clock::now();
    sortFunc(arr, l, r);
    auto end = high_resolution_clock::now();
    duration<double> duration = end - start;
    cout << setw(12) << algorithm_name << ": " << fixed << setprecision(6) << duration.count() << " s" << endl;
}

void measureTime(void (*sortFunc)(vector<int>&), vector<int> arr, const string& algorithm_name) {
    auto start = high_resolution_clock::now();
    sortFunc(arr);
    auto end = high_resolution_clock::now();
    duration<double> duration = end - start;
    cout << setw(12) << algorithm_name << ": " << fixed << setprecision(6) << duration.count() << " s" << endl;
}

int main() {
    vector<int> input_sizes = {10, 100, 500, 1000, 10000};
    vector<void (*)(vector<int>&)> algorithms = {bubbleSort, insertionSort, selectionSort};
    vector<void (*)(vector<int>&, int, int)> recursive_algorithms = {mergeSort, quickSort};
    vector<string> algorithm_names = {"Bubble Sort", "Insertion Sort", "Selection Sort", "Merge Sort", "Quick Sort"};

    for (int size : input_sizes) {
        vector<int> arr(size);
        for (int i = 0; i < size; i++) {
            arr[i] = size - i;  // Array terurut terbalik
        }

        cout << "\nInput size: " << size << endl;
        for (int i = 0; i < algorithms.size(); i++) {
            vector<int> arr_copy = arr;
            measureTime(algorithms[i], arr_copy, algorithm_names[i]);
        }

        for (int i = 0; i < recursive_algorithms.size(); i++) {
            vector<int> arr_copy = arr;
            measureTime(recursive_algorithms[i], arr_copy, 0, arr_copy.size() - 1, algorithm_names[i + algorithms.size()]);
        }
    }

    return 0;
}
